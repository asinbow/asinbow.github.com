<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ASINBOW]]></title>
  <link href="http://asinbow.github.com/atom.xml" rel="self"/>
  <link href="http://asinbow.github.com/"/>
  <updated>2012-05-01T21:02:06+08:00</updated>
  <id>http://asinbow.github.com/</id>
  <author>
    <name><![CDATA[asinbow.wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[20120501计划]]></title>
    <link href="http://asinbow.github.com/blog/2012/05/01/20120501/"/>
    <updated>2012-05-01T18:30:00+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/05/01/20120501</id>
    <content type="html"><![CDATA[<h3></h3>

<p>已经好久没有写日记了，
主要还是自己的毛病。
一个是过于懒惰，
再则是容易受到干扰。</p>

<p>四月下来，
工作主体内容是MongoDB，
现在公司的MongoDB已经上线了两个星期了，
看起来还是压力不大，
不过之后还要进一步调优。</p>

<p>下周的任务会比较多</p>

<ul>
<li>动态的Server切换（最好是连接不断）</li>
<li>为public的连接增加In/Out流量记数、
In/Out通信交互次数记数，
在连接断开的时候记入日志。</li>
<li>支持语音UGC的开发，
需要VC++开发。</li>
</ul>


<p>最近在学习Scala语言，
感觉在java虚拟机上面还是有不少花样可以玩的，
一个是性能，二是并发。
然后，还要再花点时间研究java虚拟机的汇编，
毕竟汇编的基础还是不错的。</p>

<p>学习Scala的时候一定要勤于练习，
多写代码。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[儿童游戏产品——有趣？]]></title>
    <link href="http://asinbow.github.com/blog/2012/04/09/kids-game-instresting-trap/"/>
    <updated>2012-04-09T23:42:00+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/04/09/kids-game-instresting-trap</id>
    <content type="html"><![CDATA[<h3>引言</h3>

<p>在我所知的范围内，
似乎大家都把有趣性作为针对儿童的游戏的终极追求，
现在这个似乎是没有问题的，
各大相关网站也是这么个套路。
但是大家互相比下来，
虽然各有用户群，
但是都没有给整个行业带来颠覆性的影响。</p>

<p>这些让我觉得大家都已经陷进去了。</p>

<h3>为什么做游戏？</h3>

<p>从事这个的行业的大多数人都是没有想过这个问题的，
或许你能得到的最多的答案就是：
干这个能够有钱赚。
而且，这个“钱”还不是愿意掏钱的客户手中的钱，
到目前为止，很多还只是投资人的钱。</p>

<p>这个会不会就是投资人最大的困境？
钱都烧在一帮并不热爱手中活计的人的身上？</p>

<p><font color="red"><em>(未完)</em></font></p>

<h3>让儿童觉得有趣，这个真的太肤浅</h3>

<h3>游戏应该定位为文化产品，而文化产品就是让人来崇拜的</h3>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[儿童产品，请避开智力开发]]></title>
    <link href="http://asinbow.github.com/blog/2012/04/06/kids-game-no-intellegence-develop/"/>
    <updated>2012-04-06T23:42:00+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/04/06/kids-game-no-intellegence-develop</id>
    <content type="html"><![CDATA[<h3></h3>

<p><font color="red"><em>(未开始)</em></font></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120406 whole week]]></title>
    <link href="http://asinbow.github.com/blog/2012/04/06/20120406/"/>
    <updated>2012-04-06T23:42:00+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/04/06/20120406</id>
    <content type="html"><![CDATA[<h3>本周进展</h3>

<p>本周总共工作两天，
主要是好好考量了一下<code>MongoDB</code>的<code>sharding</code>，
并开始了尝试把一部分数据用MongDB存储。
这个下周要保证能够上线。</p>

<h3>下周目标</h3>

<p>周一要完成<code>MongoDB</code>对部分数据的应用，
并完成大部分测试，
这一部分内容要抓紧，
因为周一还要开会，
还要打球。</p>

<p>周二上午提交这部分代码，
并将这部分修改报告给QA。</p>

<h3>注意事项</h3>

<ul>
<li>压力测试

<ul>
<li><code>MongoDB</code>的连接数多少合适？</li>
<li>对于不需要<code>MongoDB</code>的<code>server</code>，
避免打开连接。</li>
</ul>
</li>
<li>预先安装<code>MongoDB</code>到外网，
搭建<code>Replica Set</code>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120406 whole week]]></title>
    <link href="http://asinbow.github.com/blog/2012/04/06/20120406/"/>
    <updated>2012-04-06T23:42:00+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/04/06/20120406</id>
    <content type="html"><![CDATA[<h3>本周进展</h3>

<p>本周总共工作两天，
主要是好好考量了一下<code>MongoDB</code>的<code>sharding</code>，
并开始了尝试把一部分数据用MongDB存储。
这个下周要保证能够上线。</p>

<h3>下周目标</h3>

<p>周一要完成<code>MongoDB</code>对部分数据的应用，
并完成大部分测试，
这一部分内容要抓紧，
因为周一还要开会，
还要打球。</p>

<p>周二上午提交这部分代码，
并将这部分修改报告给QA。</p>

<h3>注意事项</h3>

<ul>
<li>压力测试

<ul>
<li><code>MongoDB</code>的连接数多少合适？</li>
<li>对于不需要<code>MongoDB</code>的<code>server</code>，
避免打开连接。</li>
</ul>
</li>
<li>预先安装<code>MongoDB</code>到外网，
搭建<code>Replica Set</code>。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120330]]></title>
    <link href="http://asinbow.github.com/blog/2012/03/30/20120330/"/>
    <updated>2012-03-30T23:42:00+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/03/30/20120330</id>
    <content type="html"><![CDATA[<h3>今日进展</h3>

<p>上午折腾mongodb的集群的搭建，
最终结果不错，
在自己的本地完成了最小集群的互联。
下面一步，
应该就是要实现sharding，
现在还不知道mongoid如何在sharding方面和mongos互通。</p>

<p>下午的时候，
想把这些天折腾mongodb的东西记录下来，
以便日后和同事分享，
于是尝试做幻灯片。
零散地整理了一些，
不过不多。</p>

<hr />

<h3>明天开始</h3>

<ul>
<li>学习如何管理mongodb的sharding<br/>
  阅读<a href="http://www.mongodb.org/display/DOCS/Sharding">mongodb官方的文档</a>。
有一本不错的书，
叫作<em><a href="http://shop.oreilly.com/product/0636920018308.do">Scaling Mongodb</a></em>，
之前很多不解，
现有随着对mongodb的逐渐深入，
应该能够看得明白。在<a href="http://blog.nosqlfan.com/books">这里</a>可以获取。</li>
<li>看明白mongoid中的sharding key是如何映射到mongodb集群中去的。</li>
<li>将mongodb集成到现有的java代码中去，刚好用心看一下java。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120328]]></title>
    <link href="http://asinbow.github.com/blog/2012/03/28/20120328/"/>
    <updated>2012-03-28T23:42:00+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/03/28/20120328</id>
    <content type="html"><![CDATA[<p>最近总算是见识了一下完全秘薪制的崩盘，
公司人事忽然间变动了不少，
原本不必要的损失看来在这次风波中也难以避免了。
这个引出的问题就是，
在一个不断变大的公司里面，
完全的秘薪制是否真的能够降低成本？</p>

<p>显然事情决没有这么简单。</p>

<p>今天上午把avatar服装的问题踢给了新来的美术同事，
还得亲自教新同事怎么弄，
美术走人了，
技术顶场，
这个是什么世道啊！</p>

<p>然后开始追踪登陆失败的bug，
最后不了了之，
决定如入新的log，
这次上线再看。</p>

<p>下午折腾mongodb的replica set和sharding。
sharding的还没弄完，
replica set倒是成功了。
不过这次是不会用sharding了，
因为还没有到那一步，
只是要研究清楚。
明天发布完毕后，
会跟上司要一台机器的权限，
尝试上线一些东西了。</p>

<h3>mongodb notes</h3>

<ul>
<li>backup

<ul>
<li><a href="http://www.mongodb.org/display/DOCS/Backups">mongodb backup</a></li>
<li><a href="https://github.com/micahwedemeyer/automongobackup">auto backup stuff from github</a></li>
<li><a href="http://www.10gen.com/presentations/mongosf-2011/backing-up-mongodb-cluster">backup presentation</a></li>
</ul>
</li>
<li>security

<ul>
<li><a href="http://www.mongodb.org/display/DOCS/Security+and+Authentication">mongodb security</a></li>
</ul>
</li>
<li>sharding

<ul>
<li><a href="http://www.mongodb.org/display/DOCS/Sharding">mongodb sharding</a></li>
</ul>
</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[migrate to octopress]]></title>
    <link href="http://asinbow.github.com/blog/2012/03/14/migrate-to-octopress/"/>
    <updated>2012-03-14T22:51:00+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/03/14/migrate-to-octopress</id>
    <content type="html"><![CDATA[<hr />

<h3>成功从wordpress迁移到octopress</h3>

<p>庆祝一下！
以后可以自由地用markdown写东西了。</p>

<p>貌似还有不小的额外工作量，
不过比起可以用vim和markdown写东西，
这些都不算什么
——希望我不是过于乐观。</p>

<p>下面追加两条octopress中的代码片断作为例子，
貌似不错。</p>

<p><strong>RUBY</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">test</span>
</span><span class='line'>    <span class="mi">123</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>ERLANG</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'><span class="nf">test</span><span class="p">()</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">Val</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">],</span>
</span><span class='line'>    <span class="p">[</span><span class="nv">H</span><span class="p">|</span><span class="nv">T</span><span class="p">]</span> <span class="o">=</span> <span class="nv">Val</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">T</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vimium——chrome下不错的vim式插件]]></title>
    <link href="http://asinbow.github.com/blog/2012/03/03/vimium-introduction/"/>
    <updated>2012-03-03T00:08:15+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/03/03/vimium-introduction</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/philc/vimium">vimium</a>
以前也用过一些其它的类似插件，不过总是觉得配置复杂或是上手困难。</p>

<p>这个不错，没有了以上的两个问题。</p>

<hr />

<h3>jekyll &amp; markdown</h3>

<p>一、<a href="http://jekyllrb.com/">jekyll</a>
二、<a href="http://markdown.tw/">markdown</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120301]]></title>
    <link href="http://asinbow.github.com/blog/2012/03/02/20120301/"/>
    <updated>2012-03-02T01:32:03+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/03/02/20120301</id>
    <content type="html"><![CDATA[<h3>1. erlang dynamic</h3>

<blockquote><p><a href="http://www.erlang.org/doc/man/code.html">code</a> module.<br/>
<a href="https://github.com/JacobVorreuter/dynamic_compile">dynamic_compile</a> module.</p></blockquote>

<h3>2. erlang key-value store <a href="http://learnyousomeerlang.com/static/erlang/keyval_benchmark.erl">benchmark</a></h3>

<blockquote><p>dict is a little fast than gb_trees, but seems not support traverse.</p></blockquote>

<h3>3. 明天的去公司实现erlang的room server，</h3>

<p>先用单一的gen_server实现吧，
减小复杂度。
虽然锁的粒度是全局的，
但是如果把算法以外的操作都spawn出去，
erlang的性能应该绰绰有余。
未来一旦系统稳定了，
减小一部分锁的粒度到room层次，
提高性能也会容易一些。</p>

<p>核心是写出data structure和algorithm。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120228]]></title>
    <link href="http://asinbow.github.com/blog/2012/02/28/20120228/"/>
    <updated>2012-02-28T23:44:40+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/02/28/20120228</id>
    <content type="html"><![CDATA[<p>今天发工资，不过我新办的银行卡没有登记到公司那边，没有发到。等一两天吧。</p>


<p>erlang：</p>


<p>1. try catch还有一个after，理解每个runtime exception，throw error exit.</p>


<p>2. 有时间继续学习<a href="http://learnyousomeerlang.com/a-short-visit-to-common-data-structures#key-value-stores">erlang data structures</a>。</p>


<p>3. erlang的动态特性还能发掘多少？</p>


<p>4. 我设计的service有点问题，明天改好。</p>


<p>5. 明天还得和同事协商解决一个问题，拖了一天的。</p>


<p>6. 明天算是正式开始instance manager逻辑的迁移。</p>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120224]]></title>
    <link href="http://asinbow.github.com/blog/2012/02/24/20120224/"/>
    <updated>2012-02-24T23:47:34+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/02/24/20120224</id>
    <content type="html"><![CDATA[<h3>erlang使用总结：</h3>

<p>使用erlang也有一段时间了，
感觉这个语言还是很特别的，
有一些感触，
随便写写。</p>

<p>如果一个gen_server有较高的并发需求，
在handle_*函数里面一定减少代码，
要尽量快的更新state，
然后转向下一条消息的处理。
这个是因为，
gen_server的消息处理实际上就是erlang本身内建的那个。
所有消息都是依次处理的，
如何减少handle_*函数中的代码量，
是高并发的秘诀。
所有的和更新state无关的代码都应该spawn一个新的process去做。</p>

<p>需要一个自定义的spawn，
进入这个函数的时候，
自动做一些复制的事情，
这样可以使得lager之类的依赖进程局部存储的库工作正常。</p>

<p>erlang的macro并不强大，
开发过程中发现并不如意，
考虑把一部分的macro变成函数，
以保持代码的可读性。</p>

<p>现在主攻的一块代码的逻辑需要还是比较清析的，
但是写出的代码却无法表达出范式，
虽然明显有类似逻辑。
看来对函数式编程还是不够参透，
明天的一个主要目标就是抽取范式，
可能会借助macro，
但是不能滥用。</p>

<p>今天还有一个收获，
就是学习了erlang的各种数据容器，
明白了不少选取合适容器的依据。</p>

<h2>明天的目标：</h2>

<blockquote><ul>
<li>自定义的spawn。</li>
<li>迁移macro到函数。</li>
<li>抽取request handler的范式，改善现有代码。</li>
<li>实现block_request, async_request和push_request的逻辑。</li>
<li>测试简单的请求发送和接收，包括as client to cloud和as server to battle。</li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120221]]></title>
    <link href="http://asinbow.github.com/blog/2012/02/21/20120221/"/>
    <updated>2012-02-21T22:10:49+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/02/21/20120221</id>
    <content type="html"><![CDATA[<h3>进展：</h3>

<p>这两天的工作进展相当缓慢，
erlang的现有代码结构被我狂改了一通，
已经面目全非了，
好在测试通得过。</p>

<p>修改的主要目的是引入类似于面向对象语言的编程方式，
或者说是ruby的mixin。
设计初衷是基本达到了，
只是在数据如何存储方面犹豫再三，
实在没有主张。</p>

<p>现在的代码已经能够发起并建立连接了——
嗯，好在比昨天前进了一步，
不然太他妈的没面子了。</p>

<h3>明天的目标：</h3>

<ul>
<li><p>1、实现发送ticket建立adim连接。</p></li>
<li><p>2、在1的基础上，完成request模型。<br/>
包括request_id, request_handler, request_callback, timeout, non-block process。
其他方面就爱咋咋吧。</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120212]]></title>
    <link href="http://asinbow.github.com/blog/2012/02/12/20120212/"/>
    <updated>2012-02-12T22:41:19+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/02/12/20120212</id>
    <content type="html"><![CDATA[<h3>进展：</h3>

<p>下午到公司解决了这两天一直在想的一个erlang的配置问题。
然后给现在的开发增加了一个辅助功能。</p>

<h3>总结：</h3>

<p>现在感觉对erlang的编程模式还不是太深入，
在写代码的时候，
总是在不同的数据结构和编程模型之间摇摆不定。</p>

<p>看起来还是要多多实践啊。</p>

<h3>erlang</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='erlang'><span class='line'>    <span class="n">start_link</span><span class="p">(</span><span class="nv">Module</span><span class="p">,</span> <span class="nv">Args</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">startlink_ret</span><span class="p">()</span>
</span><span class='line'>    <span class="n">start_link</span><span class="p">(</span><span class="nv">SupName</span><span class="p">,</span> <span class="nv">Module</span><span class="p">,</span> <span class="nv">Args</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">startlink_ret</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">SupName</span> <span class="o">=</span> <span class="n">sup_name</span><span class="p">()</span>
</span><span class='line'>    <span class="nv">Module</span> <span class="o">=</span> <span class="n">module</span><span class="p">()</span>
</span><span class='line'>    <span class="nv">Args</span> <span class="o">=</span> <span class="n">term</span><span class="p">()</span>
</span><span class='line'>    <span class="n">startlink_ret</span><span class="p">()</span> <span class="o">=</span> <span class="p">{</span><span class="n">ok</span><span class="p">,</span> <span class="n">pid</span><span class="p">()}</span>
</span><span class='line'>                    <span class="p">|</span> <span class="n">ignore</span>
</span><span class='line'>                    <span class="p">|</span> <span class="p">{</span><span class="n">error</span><span class="p">,</span> <span class="n">startlink_err</span><span class="p">()}</span>
</span><span class='line'>    <span class="n">startlink_err</span><span class="p">()</span> <span class="o">=</span> <span class="p">{</span><span class="n">already_started</span><span class="p">,</span> <span class="n">pid</span><span class="p">()}</span> <span class="p">|</span> <span class="n">shutdown</span> <span class="p">|</span> <span class="n">term</span><span class="p">()</span>
</span><span class='line'>    <span class="n">sup_name</span><span class="p">()</span> <span class="o">=</span> <span class="p">{</span><span class="n">local</span><span class="p">,</span> <span class="nv">Name</span> <span class="p">::</span> <span class="n">atom</span><span class="p">()}</span> <span class="p">|</span> <span class="p">{</span><span class="n">global</span><span class="p">,</span> <span class="nv">Name</span> <span class="p">::</span> <span class="n">atom</span><span class="p">()}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120208]]></title>
    <link href="http://asinbow.github.com/blog/2012/02/08/20120208/"/>
    <updated>2012-02-08T22:07:28+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/02/08/20120208</id>
    <content type="html"><![CDATA[<h3>进展：</h3>

<p>解决了几个细碎的问题，
但是service的cpu消耗和fiber切换报告还没有出来，
这个不是很满意。
为开发模式增加了定制广播消息的功能。</p>

<p>修改了个人主页，
修复了现有的bug，
悲剧的是期间客户端开发人人员偷偷修改了几个文件的路径，
来回折腾了好几趟。</p>

<p>然后开始尝试那个单点server的erlang重写。
下午的时候向同事请教了一下相关问题，
只能说是初步了解了结构。</p>

<h3>计划：</h3>

<p>完成那个报告。<br/>
专心erlang server的开发，紧凑地安排时间。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120206]]></title>
    <link href="http://asinbow.github.com/blog/2012/02/06/20120206/"/>
    <updated>2012-02-06T22:25:32+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/02/06/20120206</id>
    <content type="html"><![CDATA[<h3>总结和计划：</h3>

<p>旱晨到公司，
落地先解决了自己私下里发现的ruby服务器的bug，
然后修改了erlang服务器一些配置。
然后就是开始erlang的gen_server，
一直到下午开会，
期间不断记下一些细碎的任务。</p>

<p>开会的时候，
确定了我个人的一个新的大任务，
就是把一个单点sever从ruby迁移到erlang。
估计难度会比较大，
不过肯定会搞定。</p>

<p>明天到公司后先那些细碎的任务先解决，
然后正式转入erlang单点sever的开发。</p>

<p>感觉今天还是很充实的，
这两天开发erlang服务器的时候，
估计会学到不少东西的。</p>

<p>现在每天花了不少时间在微博，
看看消息，
转转消息。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120205]]></title>
    <link href="http://asinbow.github.com/blog/2012/02/05/20120205/"/>
    <updated>2012-02-05T22:56:18+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/02/05/20120205</id>
    <content type="html"><![CDATA[<h3>昨天计划的进展：</h3>

<p>五笔输入法的字根基本记忆完毕，
现在就是使用它来写着这篇文章。
他妈的真慢。
SHIT！<br/>
erlang的二进制基本了解完毕，
貌似我原来期待的功能并没有，
有点失望。<br/>
erlang的gen_sever部分到现在还没有真正开始，
希望明天能有不错的进展。<br/>
好吧，
我的五笔输入真慢。<br/>
完毕！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120203]]></title>
    <link href="http://asinbow.github.com/blog/2012/02/03/20120203/"/>
    <updated>2012-02-03T23:14:40+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/02/03/20120203</id>
    <content type="html"><![CDATA[<h3>总结：</h3>

<p>这两天主要做的事情是把fiber_time_trace的问题解决，
以及适当更改clog的server的代码，
以保证运作正常。</p>

<p>fiber_time_trace的问题比较头疼，
最终发现是因为绕了个弯子；
照原来的代码模仿下来之后，
没想到一部分特殊的代码使用了隐藏路径，
查了半天，发现的时候简直吐血了。</p>

<p>clog的server的代码现在运行下来还是不错的，
不过我做的时候主要还是套用现有代码做的，
完成以后感觉自己还是对erlang东西学习得不够深入。
针对这个这两天需要学习下面两个方面的内容：
一是erlang的binary操作，
二是gen_server的整个体系。
另外，
还需要多体会erlang的编程风格，
当然，
这个过程得多写代码了。</p>

<h3>还有一个小计划：</h3>

<p>学习五笔输入法，
我记得大一的时候学过这玩意儿的，
后来就不常用了。</p>

<p>主要是不和人聊天。
悲催～
这次重新学习这个主要是为了学东西的时候快一点，
像现在用拼音输入法一个一个的选来选取，
累挺。</p>

<p>今天背了一部分字根，
应该不会太难，
因为只是复习而已。
周末抽时间完成上面一部分内容。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[20120130工作进展]]></title>
    <link href="http://asinbow.github.com/blog/2012/01/30/20120130/"/>
    <updated>2012-01-30T22:11:26+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/01/30/20120130</id>
    <content type="html"><![CDATA[<p>早晨刚到的时候谋划开始写erlang的那个log server，
面临的最大问题是现有的代码还不太熟悉。</p>

<p>刚开始一会儿就开了晨会，
所有这两天就开始上班的同事聚在一起。
开会的时候觉得上次的那个Fiber time的问题还没有解决，
回到办公桌上搞了一会儿，
发现不是我想得那么简单，
暂时放下了。</p>

<p>于是接着继续整erlang，
最为纠结的就是究竟用不用现有结构，
以及怎么用。
左右摇摆，
最终还是使用了现有结构。
到6点钟的时候，
程序编译通过了，
接着有一部分跑通了。
明天过去继续调通其余部分。</p>

<p>现在比较麻烦的是，
erlang的动态更新代码还不太会，
编译调试，
然后都比较慢。
明天早上到公司先弄明白这个，
所谓磨刀*****。</p>

<p>过一会儿就睡了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年计划]]></title>
    <link href="http://asinbow.github.com/blog/2012/01/23/2012-year-plan/"/>
    <updated>2012-01-23T00:00:58+08:00</updated>
    <id>http://asinbow.github.com/blog/2012/01/23/2012-year-plan</id>
    <content type="html"><![CDATA[<h4>一、傻逼的时候看看这篇文章。</h4>

<h4>二、增强自我控制，安排好作息。</h4>

<h4>三、对技术精益求精。</h4>

<h4>四、工作要控制节奏，提高效率，不要拖拖拉拉。</h4>

<h4>五、犯错的时候一定要惩罚一下自己。【*】</h4>

<h4>六、和爱人好好相处，听话，乖。</h4>

<h4>七、常回家看看。</h4>

<h4>八、坚持写作，甭管多烂。</h4>
]]></content>
  </entry>
  
</feed>
